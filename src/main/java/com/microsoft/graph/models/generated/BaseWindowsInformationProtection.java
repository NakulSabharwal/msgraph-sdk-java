// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.generated;
import com.microsoft.graph.concurrency.*;
import com.microsoft.graph.core.*;
import com.microsoft.graph.http.*;
import com.microsoft.graph.options.*;
import com.microsoft.graph.serializer.*;
import java.util.Arrays;
import java.util.EnumSet;
import com.microsoft.graph.models.generated.WindowsInformationProtectionEnforcementLevel;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionResourceCollection;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionDataRecoveryCertificate;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionApp;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionApp;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionResourceCollection;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionProxiedDomainCollection;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionIPRangeCollection;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionResourceCollection;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionResourceCollection;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionResourceCollection;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionResourceCollection;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionAppLockerFile;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionAppLockerFile;
import com.microsoft.graph.models.extensions.TargetedManagedAppPolicyAssignment;
import com.microsoft.graph.models.extensions.ManagedAppPolicy;
import com.microsoft.graph.requests.generated.BaseWindowsInformationProtectionAppLockerFileCollectionResponse;
import com.microsoft.graph.requests.extensions.WindowsInformationProtectionAppLockerFileCollectionPage;
import com.microsoft.graph.requests.generated.BaseWindowsInformationProtectionAppLockerFileCollectionResponse;
import com.microsoft.graph.requests.extensions.WindowsInformationProtectionAppLockerFileCollectionPage;
import com.microsoft.graph.requests.generated.BaseTargetedManagedAppPolicyAssignmentCollectionResponse;
import com.microsoft.graph.requests.extensions.TargetedManagedAppPolicyAssignmentCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.JsonElement;
import com.google.gson.annotations.*;
import java.util.HashMap;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Base Windows Information Protection.
 */
public class BaseWindowsInformationProtection extends ManagedAppPolicy implements IJsonBackedObject {


    /**
     * The Enforcement Level.
     * 
     */
    @SerializedName("enforcementLevel")
    @Expose
    public WindowsInformationProtectionEnforcementLevel enforcementLevel;

    /**
     * The Enterprise Domain.
     * 
     */
    @SerializedName("enterpriseDomain")
    @Expose
    public String enterpriseDomain;

    /**
     * The Enterprise Protected Domain Names.
     * 
     */
    @SerializedName("enterpriseProtectedDomainNames")
    @Expose
    public java.util.List<WindowsInformationProtectionResourceCollection> enterpriseProtectedDomainNames;

    /**
     * The Protection Under Lock Config Required.
     * 
     */
    @SerializedName("protectionUnderLockConfigRequired")
    @Expose
    public Boolean protectionUnderLockConfigRequired;

    /**
     * The Data Recovery Certificate.
     * 
     */
    @SerializedName("dataRecoveryCertificate")
    @Expose
    public WindowsInformationProtectionDataRecoveryCertificate dataRecoveryCertificate;

    /**
     * The Revoke On Unenroll Disabled.
     * 
     */
    @SerializedName("revokeOnUnenrollDisabled")
    @Expose
    public Boolean revokeOnUnenrollDisabled;

    /**
     * The Rights Management Services Template Id.
     * 
     */
    @SerializedName("rightsManagementServicesTemplateId")
    @Expose
    public java.util.UUID rightsManagementServicesTemplateId;

    /**
     * The Azure Rights Management Services Allowed.
     * 
     */
    @SerializedName("azureRightsManagementServicesAllowed")
    @Expose
    public Boolean azureRightsManagementServicesAllowed;

    /**
     * The Icons Visible.
     * 
     */
    @SerializedName("iconsVisible")
    @Expose
    public Boolean iconsVisible;

    /**
     * The Protected Apps.
     * 
     */
    @SerializedName("protectedApps")
    @Expose
    public java.util.List<WindowsInformationProtectionApp> protectedApps;

    /**
     * The Exempt Apps.
     * 
     */
    @SerializedName("exemptApps")
    @Expose
    public java.util.List<WindowsInformationProtectionApp> exemptApps;

    /**
     * The Enterprise Network Domain Names.
     * 
     */
    @SerializedName("enterpriseNetworkDomainNames")
    @Expose
    public java.util.List<WindowsInformationProtectionResourceCollection> enterpriseNetworkDomainNames;

    /**
     * The Enterprise Proxied Domains.
     * 
     */
    @SerializedName("enterpriseProxiedDomains")
    @Expose
    public java.util.List<WindowsInformationProtectionProxiedDomainCollection> enterpriseProxiedDomains;

    /**
     * The Enterprise IPRanges.
     * 
     */
    @SerializedName("enterpriseIPRanges")
    @Expose
    public java.util.List<WindowsInformationProtectionIPRangeCollection> enterpriseIPRanges;

    /**
     * The Enterprise IPRanges Are Authoritative.
     * 
     */
    @SerializedName("enterpriseIPRangesAreAuthoritative")
    @Expose
    public Boolean enterpriseIPRangesAreAuthoritative;

    /**
     * The Enterprise Proxy Servers.
     * 
     */
    @SerializedName("enterpriseProxyServers")
    @Expose
    public java.util.List<WindowsInformationProtectionResourceCollection> enterpriseProxyServers;

    /**
     * The Enterprise Internal Proxy Servers.
     * 
     */
    @SerializedName("enterpriseInternalProxyServers")
    @Expose
    public java.util.List<WindowsInformationProtectionResourceCollection> enterpriseInternalProxyServers;

    /**
     * The Enterprise Proxy Servers Are Authoritative.
     * 
     */
    @SerializedName("enterpriseProxyServersAreAuthoritative")
    @Expose
    public Boolean enterpriseProxyServersAreAuthoritative;

    /**
     * The Neutral Domain Resources.
     * 
     */
    @SerializedName("neutralDomainResources")
    @Expose
    public java.util.List<WindowsInformationProtectionResourceCollection> neutralDomainResources;

    /**
     * The Indexing Encrypted Stores Or Items Blocked.
     * 
     */
    @SerializedName("indexingEncryptedStoresOrItemsBlocked")
    @Expose
    public Boolean indexingEncryptedStoresOrItemsBlocked;

    /**
     * The Smb Auto Encrypted File Extensions.
     * 
     */
    @SerializedName("smbAutoEncryptedFileExtensions")
    @Expose
    public java.util.List<WindowsInformationProtectionResourceCollection> smbAutoEncryptedFileExtensions;

    /**
     * The Is Assigned.
     * 
     */
    @SerializedName("isAssigned")
    @Expose
    public Boolean isAssigned;

    /**
     * The Protected App Locker Files.
     * 
     */
    public WindowsInformationProtectionAppLockerFileCollectionPage protectedAppLockerFiles;

    /**
     * The Exempt App Locker Files.
     * 
     */
    public WindowsInformationProtectionAppLockerFileCollectionPage exemptAppLockerFiles;

    /**
     * The Assignments.
     * 
     */
    public TargetedManagedAppPolicyAssignmentCollectionPage assignments;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("protectedAppLockerFiles")) {
            final BaseWindowsInformationProtectionAppLockerFileCollectionResponse response = new BaseWindowsInformationProtectionAppLockerFileCollectionResponse();
            if (json.has("protectedAppLockerFiles@odata.nextLink")) {
                response.nextLink = json.get("protectedAppLockerFiles@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("protectedAppLockerFiles").toString(), JsonObject[].class);
            final WindowsInformationProtectionAppLockerFile[] array = new WindowsInformationProtectionAppLockerFile[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), WindowsInformationProtectionAppLockerFile.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            protectedAppLockerFiles = new WindowsInformationProtectionAppLockerFileCollectionPage(response, null);
        }

        if (json.has("exemptAppLockerFiles")) {
            final BaseWindowsInformationProtectionAppLockerFileCollectionResponse response = new BaseWindowsInformationProtectionAppLockerFileCollectionResponse();
            if (json.has("exemptAppLockerFiles@odata.nextLink")) {
                response.nextLink = json.get("exemptAppLockerFiles@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("exemptAppLockerFiles").toString(), JsonObject[].class);
            final WindowsInformationProtectionAppLockerFile[] array = new WindowsInformationProtectionAppLockerFile[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), WindowsInformationProtectionAppLockerFile.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            exemptAppLockerFiles = new WindowsInformationProtectionAppLockerFileCollectionPage(response, null);
        }

        if (json.has("assignments")) {
            final BaseTargetedManagedAppPolicyAssignmentCollectionResponse response = new BaseTargetedManagedAppPolicyAssignmentCollectionResponse();
            if (json.has("assignments@odata.nextLink")) {
                response.nextLink = json.get("assignments@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("assignments").toString(), JsonObject[].class);
            final TargetedManagedAppPolicyAssignment[] array = new TargetedManagedAppPolicyAssignment[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), TargetedManagedAppPolicyAssignment.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            assignments = new TargetedManagedAppPolicyAssignmentCollectionPage(response, null);
        }
    }
}
